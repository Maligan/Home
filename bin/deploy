#!/bin/sh

CONFIG=.deploy
VERSION=0.1
DRY=

version() { 
	echo "`basename $0` v$VERSION"
}

header() {
	echo "$@"
}

usage() {
	echo "Usage: `basename $0` [OPTION]..."
	echo "Source '$CONFIG' script, sync files from current machine to server."
	echo
	echo "Options:"
	echo "    -n               preform a dry-run"
	echo "    -h               show this help"
	echo "    -v VERSION       set swf file version"
}

abort() {
	test "$@" && echo "$@"
	exit 1
}

config_variable_check() {
	var_name=$1
	var_value=${!var_name}
	test "$var_value" || abort "Config '$CONFIG' variable $var_name is not defined."
}

config() {
	test -f $CONFIG	|| abort "Config '$CONFIG' not found."

	# Ignore rsync --include-from elements from config
	alias -- -=#
	alias -- +=#
	source ./$CONFIG || abort "Config '$CONFIG' eval error."
	unalias -- -
	unalias -- +

	config_variable_check "SSH_HOST"
	config_variable_check "SSH_PATH"
	config_variable_check "ASSET_SOURCE"
	config_variable_check "ASSET_TARGET"
	config_variable_check "SWF_SOURCE"
	config_variable_check "SWF_TARGET"

	ssh $SSH_HOST "test -d $SSH_PATH" || abort "Remote directory $SSH_HOST:$SSH_PATH doesn't exits."
}

rsync_count() {
	# TODO: Check rsync error status & return -1
	echo $(rsync -acni -e ssh $@ | sed '/\/$/d' | wc -l)
}

rsync_transfer() {
	rsync $DRY -ac -e ssh --out-format=' * %n' $@ | sed '/\/$/d'
}

#
# Deploy
#

# Read args
while getopts "hnv" opt; do
	case $opt in
		n) DRY=-n ;;
		h) usage; exit ;;
		*) exit ;;
	esac
done

# Read config
config

# Deploy assets
asset_args="--include-from=$CONFIG $ASSET_SOURCE $ASSET_TARGET"
asset_count=$(rsync_count $asset_args)
if [[ $asset_count -ne 0 ]]; then
	rsync_transfer $asset_args
fi

# Deploy swf
if [[ -f $SWF_SOURCE ]]; then
	swf_args="$SWF_SOURCE $SWF_TARGET"
	swf_count=$(rsync_count $swf_args)
	if [[ $swf_count -ne 0 ]]; then
		rsync_transfer $swf_args
	fi
fi

## Traceback
#if [ $asset_count -eq 0 ] && [ $swf_count -eq 0 ]; then 
	#header "Success (Updated files not being detected)"
#else
	#header "Success"
#fi
