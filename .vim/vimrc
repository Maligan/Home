set nocompatible

"
" Vundle
"
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
filetype plugin indent on

Bundle 'gmarik/vundle'
Bundle 'maligan/molly'
Bundle 'tmhedberg/matchit'
Bundle 'ervandew/supertab'
Bundle 'altercation/vim-colors-solarized'
Bundle 'milkypostman/vim-togglelist'
Bundle 'tommcdo/vim-exchange'
Bundle 'sirver/ultisnips'
Bundle 'jiangmiao/auto-pairs'
Bundle 'terryma/vim-expand-region'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-repeat'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'

"
" Shortcuts
"
let mapleader=","

" Open .vimrc
nnoremap <silent> <leader>v :e $MYVIMRC<CR>
" Fix same issues with <C-c>
nnoremap <C-c> <Esc>
" Shortcut for :%s//
nnoremap <leader>s :%s//g<left><left>
vnoremap <leader>s :s//g<left><left>
" Toggle search highlight
nnoremap <silent> <leader>/ :set hlsearch!<CR>
" Y from cursor position to the end of line
nnoremap Y y$
" Toggle whitespaces
nnoremap <silent> <leader>w :set list!<CR>
" Boosted command prompt call
nnoremap ; :
vnoremap ; :

" Switch splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
" Navigate with <Ctrl>-hjkl in Insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l
" Reselect area after change indent
vnoremap < <gv
vnoremap > >gv
" Bubbling lines with unimpaired (<8a> = <C-S-j>, <8b> = <C-S-k> in mintty)
nmap  ]e
nmap  [e
imap  <C-o>]e
imap  <C-o>[e
vmap  ]egv
vmap  [egv
" Find and replace world under cursor
nnoremap <leader>rr :%s/\<<C-r><C-w>\>//g<left><left>
nnoremap <leader>rb :bufdo %s/\<<C-r><C-w>\>//ge<left><left><left>
nnoremap <leader>ra :argdo %s/\<<C-r><C-w>\>//ge<left><left><left>
" Visual mode pressing *  # searches for the current selection (from an idea by Michael Naumann)
function! Selection(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

vnoremap * :call Selection('f')<CR>
vnoremap # :call Selection('b')<CR>
" NERDTree
nnoremap <silent> <BS> :NERDTreeToggle<CR>
" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"
" CamelCase complete
"
let g:SuperTabMappingBackward = '<c-@>'
let g:SuperTabMappingForward = ''

function! TagCamelCompleteFunction(findstart, base)
    if a:findstart
        let line = getline('.')
        let start = col('.') - 1
        while start > 0 && line[start - 1] =~ '[A-Za-z_]'
            let start -= 1
        endwhile
        return start
    else
		" Define camel-pattren
		let pattern = '\v\C^' . join(split(a:base, '\u\&'), '[A-Za-z_\d]*')

		" Fetch 'name' field from tags
		let matches = []
		for entry in taglist(pattern) 
			call add(matches, entry['name'])
		endfor

		return matches
    endif
endfunction

autocmd FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, "<c-p>") |
    \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
    \ endif

set omnifunc=TagCamelCompleteFunction
set completeopt=menuone

"
" Auto ctags
"
autocmd BufWritePost *
	\ if filereadable('tags') |
	\   call system('ctags -a '.expand('%')) |
	\ endif

"
" Terminal
"
" File encoding
if has("multi_byte")
	set encoding=utf-8
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif
" Mode based cursor

if &term =~ '^xterm'
	" remove defalult identificatoin
	set noshowmode
	" solid underscore
	let &t_SI .= "\e[5 q"
	" solid block
	let &t_EI .= "\e[1 q"
endif

" Avoiding escape timeout issues in mintty
let &t_ti.="\e[?7727h"
let &t_te.="\e[?7727l"
noremap <Esc>O[ <Esc>
noremap! <Esc>O[ <Esc>

" Toggle cursor color (TODO: Make lang-based color)
nmap <leader>ctr :silent !echo -ne "\e]12;220,50,47\a"<CR>:redraw!<CR>
nmap <leader>ctb :silent !echo -ne "\e]12;38,139,210\a"<CR>:redraw!<CR>

"
" Auto source .vimrc
"
if has("autocmd")
	autocmd! BufWritePost .vimrc 
	autocmd BufWritePost .vimrc source $MYVIMRC
endif



















































" Behaviors
set title
set shortmess+=I
set hidden
set noswapfile
set backspace=indent,eol,start
set mouse=a
set scrolloff=0
set nowrap
set autowrite
set autoread
set linebreak
set ignorecase
set smartcase
set lazyredraw
" TODO: Make as unicode
set listchars=tab:▸\ ,eol:¬,trail:·
set fillchars=vert:│
set wmh=0
set clipboard=unnamed
set shell=/bin/bash
set timeoutlen=500
set grepprg=ack
let NERDTreeMinimalUI=1
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1

"autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

" Indent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

" Language
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

" Statusbar
set laststatus=1
set noshowmode
set showcmd
set noruler

" Colors
let g:solarized_termtrans=1
let g:solarized_style="dark"
set background=dark
colorscheme solarized

" TRASH
set incsearch
set nowrap
set number
syntax on
set numberwidth=4


"
" ActionScriptCompiler
"
compiler mxmlc
nmap <S-F6> :make clean<CR>
nmap <F6> :make -s<CR>
nmap <F5> :!adl descriptor.xml -screensize iPhone<CR>
nmap <S-F5> :make -s<CR><F5>
"nmap <leader>r :!cygstart %:r.swf<cr>:!tail -f "C:\Users\malig_000\AppData\Roaming\Macromedia\Flash Player\Logs\flashlog.txt"<cr>
set wildignore=*.swc,*.swf,tags,*.apk,*.ipr,*.iml,*.iws,*.mp3,*.wav,*.png,*.atf,*.jpg

nmap <F1> :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<CR>

