set nocompatible

"
" Vundle
"
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
filetype plugin indent on

Bundle 'easymotion/vim-easymotion'
Bundle 'ervandew/supertab'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'maligan/molly'
Bundle 'milkypostman/vim-togglelist'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'sirver/ultisnips'
Bundle 'tmhedberg/matchit'
Bundle 'tommcdo/vim-exchange'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'

"
" Shortcuts
"
let mapleader=","

" Open .vimrc
nnoremap <silent> <leader>v :e $MYVIMRC<CR>
" Fix same issues with <C-c>
nnoremap <C-c> <Esc>
" Shortcut for :%s//
nnoremap <leader>s :%s//g<left><left>
vnoremap <leader>s :s//g<left><left>
" Y from cursor position to the end of line
nnoremap Y y$
" Toggle whitespaces
nnoremap <silent> <leader>w :set list!<CR>
" Boosted command prompt call
nnoremap ; :
vnoremap ; :
" Do not jump after *, smart toggle hls with *
nnoremap <silent> <leader>/ :set hls!<CR>
nnoremap <silent> *  :call Search('\<<C-R>=expand("<cword>")<CR>\>')<CR>
vnoremap <silent> * y:call Search('<C-r>0')<CR>

function! Search(text)
	if (a:text != @/)
		call histadd("search", a:text)
		let @/ = a:text
		set hlsearch
	else
		set hlsearch!
	endif
	" There is small bug: hls not applied from functions - fix it!
	redraw
endfunction

" Windows movement with <Ctrl>-hjkl
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
" Navigate with <Ctrl>-hjkl in Insert mode
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>
" Reselect area after change indent
vnoremap < <gv
vnoremap > >gv
" Bubbling lines with unimpaired (<8a> = <C-S-j>, <8b> = <C-S-k> in mintty)
nmap ÂŠ ]e
nmap Â‹ [e
imap ÂŠ <C-o>]e
imap Â‹ <C-o>[e
vmap ÂŠ ]egv
vmap Â‹ [egv
" Find and replace world under cursor
nnoremap <leader>rr :%s/\<<C-r><C-w>\>//g<left><left>
nnoremap <leader>rb :bufdo %s/\<<C-r><C-w>\>//ge<left><left><left>
nnoremap <leader>ra :argdo %s/\<<C-r><C-w>\>//ge<left><left><left>
" Easy Motion
nmap  <Plug>(easymotion-s)
vmap  <Plug>(easymotion-s)
" NERDTree Ctrl+\ & Ctrl+Shift+\
nnoremap <silent> <C-\> :NERDTreeToggle<CR>
nnoremap <silent> Âœ	:NERDTreeFind<CR>
" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" SuperTab
let g:SuperTabMappingBackward = "<c-@>"
let g:SuperTabMappingForward = "Â€"

"
" Terminal
"
" File encoding
if has("multi_byte")
	set encoding=utf-8
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif

" Mode based cursor & mouse support
if &term =~ '^xterm'
	" remove defalult identificatoin
	set noshowmode
	" solid underscore
	let &t_SI = "\e[5 q"
	" solid block
	let &t_EI = "\e[1 q"
	" allow drag
	set ttymouse=xterm2
endif

" Dirty hack witch allow call terminal escape sequence
function! SendEscapeSequence(sequence)
	if &term =~ '^xterm'
		" save original values
		let o_t_SI = &t_SI
		let o_t_EI = &t_EI

		" replace vim variable to sequence
		let &t_SI = a:sequence
		let &t_EI = a:sequence

		" change mode and return it back
		normal a
		
		" restore values
		let &t_SI = o_t_SI
		let &t_EI = o_t_EI
	endif
endfunction

"
" Autocommand
"
" Auto source .vimrc
if has("autocmd")
	autocmd! BufWritePost .vimrc 
	autocmd BufWritePost .vimrc source $MYVIMRC

	" If doing a diff. Upon writing changes to file, automatically update the differences
	autocmd BufWritePost * if &diff == 1 | diffupdate | endif

	" Auto ctags
	autocmd BufWritePost *
		\ if filereadable('tags') |
		\   call system('ctags -a '.expand('%')) |
		\ endif
endif

command! FormatJSON :%!python -m json.tool
command! FormatXML :%!xmllint --format --recover - 2>/dev/null"

































" Indent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

" Language
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

" Statusbar
set laststatus=1
set noshowmode
set showcmd
set noruler

" Colors
set background=dark
colorscheme ir_black

" Behaviors

" http://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=500
set ttimeoutlen=0

set title
set shortmess+=I
set hidden
set noswapfile
set backspace=indent,eol,start
set mouse=a
set scrolloff=0
set nowrap
set autowrite
set autoread
set linebreak
set ignorecase
set smartcase
set lazyredraw
" TODO: Make as unicode
set listchars=tab:â–¸\ ,eol:Â¬,trail:Â·
set fillchars=vert:â”‚
set wmh=0
set clipboard=unnamed
set shell=/bin/bash
set grepprg=ack
set incsearch
set nowrap
set number
syntax on
set numberwidth=4
set wildignore=*.swc,*.swf,tags,*.apk,*.ipr,*.iml,*.iws,*.mp3,*.wav,*.png,*.atf,*.jpg

" http://vim.wikia.com/wiki/Show_a_useful_title_on_exit_in_an_xterm
let &titleold=getcwd()

let NERDTreeMinimalUI=1
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1

nnoremap <leader>m :make %<CR>


" Syntax helper
"nmap <F1> :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<CR>

" Toggle cursor color (TODO: Make lang-based color)
"nmap <leader>ctr :silent !echo -ne "\e]12;220,50,47\a"<CR>:redraw!<CR>
"nmap <leader>ctb :silent !echo -ne "\e]12;38,139,210\a"<CR>:redraw!<CR>

"nmap <leader>r :silent! call SendEscapeSequence("\e]12;220,50,47\x7")<CR>
"nmap <leader>b :silent! call SendEscapeSequence("\e]12;38,139,210\x7")<CR>

function! ToggleLanguage()
	let &iminsert = &iminsert > 0 ? 0 : 1
	call SendEscapeSequence(&iminsert > 0 ? "\e]12;135,175,215\x7" : "\e]12;255,175,0\x7")
endfunction

nmap <silent> <c-l> :call ToggleLanguage()<CR>
imap <silent> <c-l> :call ToggleLanguage()<CR>

autocmd VimLeave * call SendEscapeSequence("\e]12;255,175,0\x7")

"
" CamelCase complete
"
"function! TagCamelCompleteFunction(findstart, base)
    "if a:findstart
        "let line = getline('.')
        "let start = col('.') - 1
        "while start > 0 && line[start - 1] =~ '[A-Za-z_]'
            "let start -= 1
        "endwhile
        "return start
    "else
		"" Define camel-pattern
		"let pattern = '\v\C^' . join(split(a:base, '\u\&'), '[A-Za-z_\d]*')

		"" Fetch 'name' field from tags
		"let matches = []
		"for entry in taglist(pattern) 
			"call add(matches, entry['name'])
		"endfor

		"return matches
    "endif
"endfunction

"autocmd FileType *
    "\ if &omnifunc != '' |
    "\   call SuperTabChain(&omnifunc, "<c-p>") |
    "\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
    "\ endif

"set omnifunc=TagCamelCompleteFunction
"set completeopt=menuone
