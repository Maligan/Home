set nocompatible

"
" Vundle
"
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
filetype plugin indent on

Bundle 'gmarik/vundle'
Bundle 'maligan/molly'
Bundle 'tmhedberg/matchit'
Bundle 'ervandew/supertab'
Bundle 'mileszs/ack.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'milkypostman/vim-togglelist'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-repeat'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'

"
" Shortcuts
"
let mapleader=","

" Open .vimrc
nnoremap <silent> <leader>v :e $MYVIMRC<CR>
" Recursive search in current directory for matches with current word
nnoremap <leader>f :<C-u>execute "Ack " . expand("<cword>") <Bar> cw<CR>
" Shortcut for :%s//
nnoremap <leader>s :<C-u>%s//<left>
vnoremap <leader>s :s//<left>
" Toggle search highlight
nnoremap <silent> <leader>/ :set hlsearch!<CR>
" Y from cursor position to the end of line
nnoremap Y y$
" Toggle whitespaces
nnoremap <silent> <leader>w :set list!<CR>
" In  mode exec git blame with selected text
vnoremap <leader>b :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Auto complete {} indent and position the cursor in the middle line
inoremap {<CR> {<CR>}<Esc>O
inoremap (<CR> (<CR>)<Esc>O
inoremap [<CR> [<CR>]<Esc>O

" Switch splits
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

 " Navigate with <Ctrl>-hjkl in Insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l

" Reselect area after change indent
vnoremap < <gv
vnoremap > >gv

" В коммандном режиме разрешить прыгать в конец и начало строки, как в консоли
"cnoremap <c-e> <end>
"inoremap <c-e> <c-o>$
"cnoremap <c-a> <home>
"inoremap <c-a> <c-o>^

" Move lines (http://www.vim.org/scripts/script.php?script_id=1590)
nnoremap <C-S-k> ddkP
nnoremap <C-S-j> ddp
vnoremap <C-S-k> xkP'[V']
vnoremap <C-S-j> xp'[V']

" Find and replace in all open buffers (http://vim.wikia.com/wiki/VimTip382)
function! Replace()
	let s:word = input("Replace " . expand('<cword>') . " with:")
	:exe 'bufdo! %s/\<' . expand('<cword>') . '\>/' . s:word . '/gce'
	:unlet! s:word
endfunction
nnoremap <leader>r :<C-u>call Replace()<CR>

"  mode pressing * or # searches for the current selection (from an idea by Michael Naumann)
function! Selection(direction) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", '\\/.*$^~[]')
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'b'
		execute "normal ?" . l:pattern . "^M"
	elseif a:direction == 'gv'
		call CmdLine("Ack " . l:pattern )
	elseif a:direction == 'f'
		execute "normal /" . l:pattern . "^M"
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

function! CmdLine(str)
    execute "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

vnoremap * :call Selection('f')<CR>
vnoremap # :call Selection('b')<CR>
" When you press gv you vimgrep after the selected text
vnoremap gv :call Selection('gv')<CR>





nnoremap <leader>t :NERDTreeToggle<CR>
nnoremap <leader>n :NERDTreeFind<CR>
nnoremap <leader>m :make<CR>
nnoremap <leader>cp :CPPaste<CR>

inoremap jj <Esc>
nnoremap <C-c> <Esc>
nnoremap ; :
vnoremap ; :














"
" CamelCase complete
"
let g:SuperTabMappingBackward = '<c-@>'
let g:SuperTabMappingForward = ''

function! TagCamelCompleteFunction(findstart, base)
    if a:findstart
        let line = getline('.')
        let start = col('.') - 1
        while start > 0 && line[start - 1] =~ '[A-Za-z_]'
            let start -= 1
        endwhile
        return start
    else
		" Define camel-pattren
		let pattern = '\v\C^' . join(split(a:base, '\u\&'), '[A-Za-z_\d]*')

		" Fetch 'name' field from tags
		let matches = []
		for entry in taglist(pattern) 
			call add(matches, entry['name'])
		endfor

		return matches
    endif
endfunction

set omnifunc=TagCamelCompleteFunction
set completeopt=menuone

"
" Auto ctags
"
autocmd BufWritePost *
	\ if filereadable('tags') |
	\   call system('ctags -a '.expand('%')) |
	\ endif

autocmd FileType *
    \ if &omnifunc != '' |
    \   call SuperTabChain(&omnifunc, "<c-p>") |
    \   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
    \ endif

"
" Terminal
"
" Mode based cursor
if &term =~ '^xterm'
	" remove defalult identificatoin
	set noshowmode
	" solid underscore
	let &t_SI .= "\e[5 q"
	" solid block
	let &t_EI .= "\e[1 q"
endif

" Avoiding escape timeout issues in mintty
let &t_ti.="\e[?7727h"
let &t_te.="\e[?7727l"
noremap <Esc>O[ <Esc>
noremap! <Esc>O[ <Esc>

"
" Auto source .vimrc
"
if has("autocmd")
	autocmd! BufWritePost .vimrc 
	autocmd BufWritePost .vimrc source $MYVIMRC
endif






























































if has("multi_byte")
	set encoding=utf-8
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif

" Behaviors
set title
set shortmess+=I
set hidden
set noswapfile
set backspace=indent,eol,start
set mouse=a
set scrolloff=0
set nowrap
set autowrite
set autoread
set linebreak
set ignorecase
set smartcase
set listchars=tab:▸\ ,eol:¬,trail:·
set fillchars=vert:│
set wmh=0
set clipboard=unnamed
set shell=/bin/bash
let NERDTreeMinimalUI=1


"autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

" Indent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

" Statusbar
set laststatus=1
set showmode
set showcmd
set noruler

" Colors
let g:solarized_termtrans=1
let g:solarized_style="dark"
set background=dark
colorscheme solarized

" TRASH
set incsearch
set nowrap
set number
syntax on
set numberwidth=4





"
" Toggle cursor color
"

"silent !echo -ne "\e]12;220,50,47\a"
"silent !echo -ne "\e]12;38,139,210\a"
"imap <F12> <C-O>:silent call ToggleLanguage()<CR>
nmap <leader>ctr :silent !echo -ne "\e]12;220,50,47\a"<CR>:redraw!<CR>
nmap <leader>ctb :silent !echo -ne "\e]12;38,139,210\a"<CR>:redraw!<CR>
"silent !echo -ne "\e]12;220,50,47\a"
"silent !echo -ne "\e]12;38,139,210\a"
"imap <F12> <C-O>:silent call ToggleLanguage()<CR>
"nmap <silent> <c-l> :call Temp()<CR>

"
" ActionScriptCompiler
"
compiler mxmlc
nmap <S-F6> :make clean<CR>
nmap <F6> :make -s<CR>
nmap <F5> :!adl descriptor.xml -screensize iPhone<CR>
nmap <S-F5> :make -s<CR><F5>
"nmap <leader>r :!cygstart %:r.swf<cr>:!tail -f "C:\Users\malig_000\AppData\Roaming\Macromedia\Flash Player\Logs\flashlog.txt"<cr>
set wildignore=*.swc,*.swf,ctags,*.apk

nmap <F1> :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<CR>

"
" Lang settings
"
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

nnoremap <s-k> :silent execute ':!cygstart http://www.google.com/?hl=ru\&q='.expand("<cword>").'\&btnI=Search'<CR>

